#------------------------------------------------------------------------------
#
# Make file for bulding lab1
#
# Use: make [options] [target]
#
# Build options:
#		BUILD=release: Compiles without debugging info *default
#		BUILD=debug: Compiles with debugging info
#
# Build Targets:
#		build: Build the whole project
#		compile-all: Compile to objects without linking
#		clean: Removes all map, hex and excutable file
#		clean_all: Removes all make generated files
#		misra_compliant: Outputs analysis of dump files according to MISRA rules
#		*.i: Generate preprocessed output from given file name
#		*.o: Generate object file from given file name
#		*.asm: Generate assembly code from given file name
#		*.dump: Generate dump files from given file name
#
#------------------------------------------------------------------------------


BUILD = release
BUILDDIR = build
TARGET = Lab_1
SOURCES = main.c startup.c
INCLUDES = -I.
OBJS := $(SOURCES:.c=.o)
DEPS := $(SOURCES:.c=.d)

# Architectures Specific Flags
LINKER_FILE = linker_script.ld
CPU = cortex-m3
SPEC =

# Compiler Flags and Defines
CC = arm-none-eabi-gcc
LD = arm-none-eabi-ld
SIZE = arm-none-eabi-size
OBJDUMP = arm-none-eabi-objdump
OBJCOPY = arm-none-eabi-objcopy
LDFLAGS = -T $(LINKER_FILE) -Map=$(BUILDDIR)/$(TARGET).map
CFLAGS = -Wall -mcpu=$(CPU) $(INCLUDES) -mthumb
CPPFLAGs =

ifeq ($(BUILD), debug)
CFLAGS := -g3 -gdwarf-2 -O0 $(CFLAGS)
endif

# Cppcheck variables
DUMPS = $(SOURCES:.c=.c.dump)
CPPCHECK = cppcheck
MISRA := "$(shell which cppcheck)/../addons/misra.py"

.PHONY: build
build : make_dirs $(OBJS)
	@echo Linking object files in to an executable...
	@$(LD) $(LDFLAGS) $(addprefix $(BUILDDIR)/,$(notdir $(OBJS))) -o $(BUILDDIR)/$(TARGET).elf
ifeq ($(BUILD), debug)
	@echo Generating assembly file from generated executable...
	@$(OBJDUMP) -D -S $(BUILDDIR)/$(TARGET).elf > $(BUILDDIR)/$(TARGET).asm
endif
	@echo Generating hex file from generated executable...
	@$(OBJCOPY) -O ihex $(BUILDDIR)/$(TARGET).elf $(BUILDDIR)/$(TARGET).hex
	@echo Executable and object final files sizes
	@$(SIZE) -Btd $(BUILDDIR)/$(TARGET).elf $(addprefix $(BUILDDIR)/,$(notdir $(OBJS)))

.PHONY: compile-all
compile-all : $(OBJS)
	@echo Finished generating object files

%.i : %.c
	@$(CC) -E $(CFLAGS) -o $(BUILDDIR)/$(notdir $@) $<

%.asm : %.c %.o
	@$(CC) -S $(CFLAGS) $<
	@$(OBJDUMP) -D -S $(BUILDDIR)/$(notdir $(word 2,$^)) > $(BUILDDIR)/$(notdir $@)

%.o : %.c
	@$(CC) -c $< $(CFLAGS) -o $(BUILDDIR)/$(notdir $@)

make_dirs:
	@mkdir -p $(BUILDDIR)
	
.PHONY: clean
clean :
	@echo Removing executable, hex and map files
	@rm -f $(BUILDDIR)/*.elf $(BUILDDIR)/*.hex $(BUILDDIR)/*.map

.PHONY: clean_all
clean_all :
	@echo Removing all files generated by make
	@rm -f $(BUILDDIR)/*.*
	
# Generate dump file from c file
%.c.dump: %.c
	@$(CPPCHECK) --dump $(INCLUDES) $<
	@mv $@ $(BUILDDIR)/$(notdir $@)

.PHONY: misra_compliant
misra_compliant: $(DUMPS)
	@echo Displaying MISRA rules violation discovered by Cppcheck
	@-python $(MISRA) $(realpath $(addprefix $(BUILDDIR)/,$(notdir $(DUMPS))))
